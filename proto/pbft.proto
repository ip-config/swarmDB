// Copyright (C) 2018 Bluzelle
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License, version 3,
// as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program. If not, see <http://www.gnu.org/licenses/>.

syntax = "proto3";

import "bluzelle.proto";

message pbft_msg
{
    pbft_msg_type type = 1;

    // used for preprepare, prepare, commit, viewchange(v+1)
    uint64 view = 2;

    // used for preprepare, prepare, commit, checkpoint, viewchange (last valid checkpoint sequence)
    uint64 sequence = 3;

    // used for preprepare, prepare, commit
    bytes request_hash = 5;

    // most messages should only have the hash, not the original request
    bzn_envelope request = 4;

    // for checkpoints
    string state_hash = 6;

    // for join/leave requests
    pbft_peer_info peer_info = 7;

    // for viewchange
    repeated bzn_envelope checkpoint_messages = 8;

    // for viewchange, and newview (O)
    // P, p_m, O
    repeated prepared_proof prepared_proofs = 9;

    // for newview
    // V valid view change messages
    repeated bzn_envelope viewchange_messages = 11;

    repeated bzn_envelope pre_prepare_messages = 12;

    // for newview
    string config_hash = 13;

    // for newview
    string config = 14;
}

message pbft_config_msg
{
    // for new_config
    string configuration = 1;
    bytes join_request_hash = 2;
}

enum pbft_msg_type
{
    PBFT_MSG_UNDEFINED = 0;
    PBFT_MSG_PREPREPARE = 2;
    PBFT_MSG_PREPARE = 3;
    PBFT_MSG_COMMIT = 4;
    PBFT_MSG_CHECKPOINT = 5;
    PBFT_MSG_JOIN = 6;
    PBFT_MSG_LEAVE = 7;
    PBFT_MSG_VIEWCHANGE = 8;
    PBFT_MSG_NEWVIEW = 9;
}

message pbft_membership_msg
{
    pbft_membership_msg_type type = 1;

    // for join/leave requests
    pbft_peer_info peer_info = 2;

    // for get_state, set_state
    uint64 sequence = 3;
    string state_hash = 4;

    // for set_state
    string state_data = 5;
    bzn_envelope newview_msg = 6;
}

enum pbft_membership_msg_type
{
    PBFT_MMSG_UNDEFINED = 0;
    PBFT_MMSG_JOIN = 1;
    PBFT_MMSG_JOIN_RESPONSE = 2;
    PBFT_MMSG_LEAVE = 3;
    PBFT_MMSG_GET_STATE = 4;
    PBFT_MMSG_SET_STATE = 5;
}

message pbft_peer_info
{
    string host = 1;
    uint32 port = 2;
    uint32 http_port = 3;
    string name = 4;
    string uuid = 5;
}

message prepared_proof
{
    bzn_envelope pre_prepare = 1;  // O
    repeated bzn_envelope prepare = 2; // P, P_m
}
